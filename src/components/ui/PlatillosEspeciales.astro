---
import { getCollection } from "astro:content";
import Estructura from "@/components/ui/Estructura.astro";

const platos = await getCollection("menu");
const displayedPlatos = platos.slice(0, 8);
---

<Estructura>
    <section class="w-full">
        <h1
            class="text-2xl md:text-3xl font-special-regular text-secondary-dark mb-6 text-center"
        >
            Nuestros Platos Destacados
        </h1>

        <div class="relative group">
            <div
                id="platos-container"
                class="flex gap-4 overflow-x-auto snap-x snap-mandatory scroll-smooth
               scrollbar-hide pb-4"
                style="scroll-padding-left: 1rem; scroll-snap-type: x mandatory;"
            >
                {
                    displayedPlatos.map((plato, index) => (
                        <article
                            class="flex-shrink-0 w-64 md:w-72 snap-start
                   group/item transition-transform duration-300
                   hover:scale-105 focus-within:scale-105"
                            data-index={index}
                        >
                            <a
                                href={`/menu/${plato.slug}`}
                                class="block relative rounded-xl overflow-hidden shadow-md
                     hover:shadow-xl focus:shadow-xl focus:outline-none
                     focus:ring-2 focus:ring-secondary-medium/50
                     transition-all duration-300"
                                aria-label={`Ver ${plato.data.name}`}
                            >
                                <div class="relative h-40 md:h-48 overflow-hidden">
                                    <img
                                        src={plato.data.image_url}
                                        alt={plato.data.name}
                                        width="288"
                                        height="192"
                                        class="w-full h-full object-cover transition-transform duration-700
                         group-hover/item:scale-110"
                                        loading={index < 2 ? "eager" : "lazy"}
                                        decoding="async"
                                    />

                                    <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />

                                    {index === 0 && (
                                        <div
                                            class="absolute top-3 left-3 px-2 py-1 rounded-full text-xs font-special-bold
                             bg-primary-medium text-cuarto-dark shadow-lg"
                                        >
                                            Nuevo
                                        </div>
                                    )}
                                    {index === 1 && (
                                        <div
                                            class="absolute top-3 left-3 px-2 py-1 rounded-full text-xs font-special-bold
                             bg-primary-medium text-cuarto-dark shadow-lg"
                                        >
                                            Popular
                                        </div>
                                    )}
                                </div>

                                <div class="absolute bottom-0 left-0 right-0 p-4">
                                    <h3 class="text-tercero-light font-title-regular text-base md:text-lg mb-1 line-clamp-2">
                                        {plato.data.name}
                                    </h3>

                                    <div class="flex items-center justify-between">
                                        <span
                                            class="text-secondary-medium text-xs px-2 py-1 bg-primary-medium/20
                             rounded-full backdrop-blur-sm"
                                        >
                                            {plato.data.category}
                                        </span>
                                        <span class="text-secondary-medium font-bold text-lg">
                                            {plato.data.price}€
                                        </span>
                                    </div>
                                </div>
                            </a>
                        </article>
                    ))
                }

                <div class="flex-shrink-0 w-32 snap-start">
                    <a
                        href="/menu"
                        class="flex flex-col items-center justify-center h-40 md:h-48
                   border-2 border-dashed border-primary-medium hover:border-cuarto-light
                   rounded-xl transition-colors duration-300 group"
                    >
                        <svg
                            class="w-8 h-8 text-tercero-dark group-hover:text-tercero-light mb-2"
                            fill="none"
                            stroke="currentColor"
                            viewBox="0 0 24 24"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        <span
                            class="text-gray-600 group-hover:text-tercero-light text-sm font-medium"
                        >
                            Ver más
                        </span>
                    </a>
                </div>
            </div>

            <button
                id="btn-prev"
                class="absolute left-2 top-1/2 -translate-y-1/2 z-10
               w-10 h-10 bg-white/90 hover:bg-white shadow-lg rounded-full
               hidden md:flex items-center justify-center transition-all duration-300
               opacity-0 group-hover:opacity-100 hover:scale-110
               disabled:opacity-30 disabled:cursor-not-allowed"
                aria-label="Ver platos anteriores"
                disabled
            >
                <svg
                    class="w-4 h-4 text-gray-700"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                >
                    <path
                        fill-rule="evenodd"
                        d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                        clip-rule="evenodd"></path>
                </svg>
            </button>

            <button
                id="btn-next"
                class="absolute right-2 top-1/2 -translate-y-1/2 z-10
               w-10 h-10 bg-white/90 hover:bg-white shadow-lg rounded-full
               hidden md:flex items-center justify-center transition-all duration-300
               opacity-0 group-hover:opacity-100 hover:scale-110
               disabled:opacity-30 disabled:cursor-not-allowed"
                aria-label="Ver platos siguientes"
            >
                <svg
                    class="w-4 h-4 text-gray-700"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                >
                    <path
                        fill-rule="evenodd"
                        d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                        clip-rule="evenodd"></path>
                </svg>
            </button>
        </div>

        <div class="flex justify-center mt-4 md:hidden">
            <div class="flex space-x-1">
                {
                    Array.from({
                        length: Math.min(displayedPlatos.length, 4),
                    }).map((_, i) => (
                        <div
                            class="w-1.5 h-1.5 rounded-full bg-gray-300 transition-colors duration-300"
                            data-indicator={i}
                        />
                    ))
                }
            </div>
        </div>
    </section>
</Estructura>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const container = document.getElementById("platos-container");
        const prevBtn = document.getElementById("btn-prev");
        const nextBtn = document.getElementById("btn-next");
        const indicators = document.querySelectorAll("[data-indicator]");

        if (!container || !prevBtn || !nextBtn) return;

        const cardWidth = 288;
        let currentIndex = 0;

        const getMaxIndex = () => {
            const containerWidth = container.clientWidth;
            const scrollWidth = container.scrollWidth;
            return Math.max(
                0,
                Math.ceil((scrollWidth - containerWidth) / cardWidth),
            );
        };

        const updateState = () => {
            const scrollLeft = container.scrollLeft;
            currentIndex = Math.round(scrollLeft / cardWidth);
            const maxIndex = getMaxIndex();

            prevBtn.disabled = currentIndex <= 0;
            nextBtn.disabled =
                scrollLeft >=
                container.scrollWidth - container.clientWidth - 10;

            indicators.forEach((indicator, i) => {
                if (i === currentIndex) {
                    indicator.classList.add("bg-tercero-dark");
                    indicator.classList.remove("bg-gray-300");
                } else {
                    indicator.classList.remove("bg-tercero-dark");
                    indicator.classList.add("bg-gray-300");
                }
            });
        };

        const scrollToIndex = (index) => {
            const targetScroll = index * cardWidth;
            container.scrollTo({
                left: targetScroll,
                behavior: "smooth",
            });
        };

        prevBtn.addEventListener("click", () => {
            scrollToIndex(Math.max(0, currentIndex - 1));
        });

        nextBtn.addEventListener("click", () => {
            scrollToIndex(currentIndex + 1);
        });

        container.addEventListener("scroll", updateState, { passive: true });

        // Touch swipe support
        let touchStartX = 0;
        let touchStartTime = 0;

        container.addEventListener(
            "touchstart",
            (e) => {
                touchStartX = e.touches[0].clientX;
                touchStartTime = Date.now();
            },
            { passive: true },
        );

        container.addEventListener(
            "touchend",
            (e) => {
                const touchEndX = e.changedTouches[0].clientX;
                const touchDuration = Date.now() - touchStartTime;
                const touchDistance = touchStartX - touchEndX;

                if (touchDuration < 300 && Math.abs(touchDistance) > 50) {
                    if (touchDistance > 0 && currentIndex < getMaxIndex()) {
                        scrollToIndex(currentIndex + 1);
                    } else if (touchDistance < 0 && currentIndex > 0) {
                        scrollToIndex(currentIndex - 1);
                    }
                }
            },
            { passive: true },
        );

        updateState();

        window.addEventListener(
            "resize",
            () => {
                setTimeout(updateState, 100);
            },
            { passive: true },
        );
    });
</script>

<style>
    .scrollbar-hide {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

    .scrollbar-hide::-webkit-scrollbar {
        display: none;
    }

    .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    /* Smooth scroll behavior */
    #platos-container {
        scroll-behavior: smooth;
        -webkit-overflow-scrolling: touch;
    }

    /* Focus styles */
    button:focus-visible {
        outline: 2px solid rgb(245 158 11);
        outline-offset: 2px;
    }

    /* Prevent layout shifts */
    article img {
        aspect-ratio: 3/2;
    }

    /* Mobile optimizations */
    @media (max-width: 768px) {
        #platos-container {
            scroll-snap-type: x mandatory;
            scroll-padding-left: 1rem;
        }

        article {
            scroll-snap-align: start;
        }
    }
</style>
